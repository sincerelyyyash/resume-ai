datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_token     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SkillLevel {
  Beginner
  Intermediate
  Expert
}

model User {
  id              String            @id @default(cuid())
  email           String           @unique
  emailVerified   DateTime?
  password        String?
  name            String
  bio             String?
  portfolio       String?
  linkedin        String?
  github          String?
  image           String?
  projects        Project[]
  experiences     Experience[]
  savedResumes    Resume[]
  jobDescriptions JobDescription[]
  skills          Skill[]
  education       Education[]
  certifications  Certification[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  accounts        Account[]
  sessions        Session[]
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime?
  url         String?
  technologies String[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Experience {
  id          String   @id @default(cuid())
  title       String
  company     String
  description String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  location    String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Resume {
  id              String   @id @default(cuid())
  title           String
  content         String
  optimizedFor    String?
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model JobDescription {
  id            String   @id @default(cuid())
  title         String
  description   String
  requirements  String[]
  pdfUrl        String?
  dateUploaded  DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Skill {
  id                String     @id @default(cuid())
  name              String
  category          String
  level             SkillLevel @default(Beginner)
  yearsOfExperience Int        @default(0)
  user              User       @relation(fields: [userId], references: [id])
  userId            String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Education {
  id          String   @id @default(cuid())
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Certification {
  id          String   @id @default(cuid())
  title       String
  issuer      String
  description String?
  issueDate   DateTime
  expiryDate  DateTime?
  credentialUrl String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
